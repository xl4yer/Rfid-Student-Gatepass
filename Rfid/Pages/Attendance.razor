@page "/attendance"
@inject NavigationManager Nav
@inject ILocalStorageService localStorage
@inject ISnackbar snackBar
@inject IDialogService dialogService
@using System.Net.Http.Headers
@using Rfid.Models;
@inject IDialogService Dialog

<PageTitle>Attendance Record</PageTitle>

<MudGrid Class="mb-3">
    <MudGrid Class="mb-3">

        <MudItem xs="12" sm="6" md="4" lg="3">
            <MudToolBar Justify="Justify.End">
                <MudButton Color="Color.Primary" Variant="Variant.Filled" @onclick="(e => Refresh())">Refresh</MudButton>
            </MudToolBar>
        </MudItem>
        <MudItem xs="12" sm="6" md="4" lg="3">
            <MudToolBar>
                <MudText Typo="Typo.body1" Style="text-transform:uppercase">Attendance Record</MudText>
            </MudToolBar>
        </MudItem>
        <MudItem xs="12" sm="12" md="4" lg="6">
            <MudToolBar Justify="Justify.End">
                <MudTextField @bind-Value="txtsearch" Clearable TextChanged="Search" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Tertiary" Label="Search" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudToolBar>
        </MudItem>
    </MudGrid>
</MudGrid>

@if (attendanceList != null && attendanceList.Any())
{
    <MudTable Class="ma-5" Dense="true" Hover="true" Items="@attendanceList" HorizontalScrollbar="true" FixedHeader="@fixed_header" FixedFooter="@fixed_footer" Height="@(fixed_header || fixed_footer ? "500px" : "")">
        <ToolBarContent>
            <MudToolBar>
                <MudLink class="export" Href="https://localhost:7033/api/Attendance/AttendanceReport"><span>></span>Export to Excel</MudLink>
            </MudToolBar>
        </ToolBarContent>
        <HeaderContent>
            <MudTh Style="height:50px;">Photo</MudTh>
            <MudTh>ID No.</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Level</MudTh>
            <MudTh>Time In</MudTh>
            <MudTh>Time Out</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd id="rows" DataLabel="Photo"><img src="data:image/bmp;base64, @(Convert.ToBase64String(@context.photo))" class="img" /></MudTd>
            <MudTd DataLabel="Student ID">@context.studID</MudTd>
            <MudTd DataLabel="Name">@context.fullname</MudTd>
            <MudTd DataLabel="Grade Level">@context.gradelvl</MudTd>
            <MudTd DataLabel="TimeIn">@context.timeIN</MudTd>
           @if (context.timeOUT == null)
        {
                <MudTd DataLabel="TimeOUT">------ -- ----</MudTd>
            }
            else
            {
                <MudTd DataLabel="TimeOUT">@context.timeOUT</MudTd>
            }
        </RowTemplate>
    </MudTable>
}
else
{
    <style>
        .centered {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }
    </style>

    <div class="centered">
        <MudProgressCircular Color="Color.Secondary" Style="height:70px;width:70px;" Indeterminate="true" />
    </div>
}

<style>
    .img {
        width: 45px;
        height: 45px;
        border-radius: 50%;
    }

    .export {
        font-weight: bold;
        text-decoration: underline;
        font-size: 15px;
        font-style: italic;
    }
</style>



@code {
    private string txtsearch { get; set; }
    attendance[]? attendanceList;
    bool fixed_header = true;
    bool fixed_footer = false;
    public DateTime? date = DateTime.Now;

    private HubConnection hubConnection;
    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Nav.ToAbsoluteUri("/hub"))
            .Build();

        hubConnection.On("client", async () =>
        {
            await loadAttendance();
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await loadAttendance();
        }
    }

    private async Task loadAttendance()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendClient");
        }

        try
        {
            using (HttpClient client = new HttpClient())
            {
                client.BaseAddress = new Uri($"{Nav.BaseUri}");
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",
                await localStorage.GetItemAsStringAsync("token"));
                HttpResponseMessage response = await client.GetAsync($"api/attendance/attendance");
                if (response.IsSuccessStatusCode)
                {
                    string contentrespose = await response.Content.ReadAsStringAsync();
                    attendanceList = JsonConvert.DeserializeObject<attendance[]>(contentrespose);
                    StateHasChanged();
                }
                else
                {
                    snackBar.Add($"Warning: {response.StatusCode}", Severity.Warning);
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {

        }
    }

    private async Task Refresh()
    {
        if (hubConnection.State == HubConnectionState.Disconnected)
        {
            await hubConnection.StartAsync();
        }
        await loadAttendance();
    }

    private async Task Search()
    {
        if (string.IsNullOrWhiteSpace(txtsearch))
        {
            StateHasChanged();
            return;
        }
        await hubConnection.StopAsync();
        using (HttpClient client = new HttpClient())
        {
            client.BaseAddress = new Uri($"{Nav.BaseUri}");
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",
                await localStorage.GetItemAsStringAsync("token"));
            HttpResponseMessage response = await client.GetAsync($"api/Attendance/SearchAttendance?search={txtsearch}");
            if (response.IsSuccessStatusCode)
            {
                string contentResponse = await response.Content.ReadAsStringAsync();
                attendanceList = JsonConvert.DeserializeObject<attendance[]>(contentResponse);
                StateHasChanged();
            }
            else
            {
                snackBar.Add($"Warning: {response.StatusCode}", Severity.Warning);
                StateHasChanged();
            }
        }
    }

}